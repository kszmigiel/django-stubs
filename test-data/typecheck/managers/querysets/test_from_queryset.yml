-   case: from_queryset_with_base_manager
    main: |
        from myapp.models import MyModel

        reveal_type(MyModel().objects)  # N: Revealed type is 'myapp.models.NewBaseManager[myapp.models.MyModel*]'
        reveal_type(MyModel().objects.get())  # N: Revealed type is 'myapp.models.MyModel*'
        reveal_type(MyModel().objects.queryset_method)  # N: Revealed type is 'def () -> builtins.str'
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is 'builtins.str'

        reveal_type(MyModel().objects2)  # N: Revealed type is 'myapp.models.NewManager[myapp.models.MyModel*]'
        reveal_type(MyModel().objects2.get())  # N: Revealed type is 'myapp.models.MyModel*'
        reveal_type(MyModel().objects2.queryset_method)  # N: Revealed type is 'def () -> builtins.str'
        reveal_type(MyModel().objects2.queryset_method())  # N: Revealed type is 'builtins.str'
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from typing import TypeVar
                from django.db import models
                from django.db.models.manager import BaseManager, Manager
                from mypy_django_plugin.lib import generics

                generics.make_classes_generic(models.QuerySet)
                _M = TypeVar('_M', bound=models.Model)

                class ModelQuerySet(models.QuerySet[_M]):
                    def queryset_method(self) -> str:
                        return 'hello'

                NewBaseManager = BaseManager.from_queryset(ModelQuerySet)
                NewManager = Manager.from_queryset(ModelQuerySet)

                generics.make_classes_generic(NewBaseManager, NewManager)

                class MyModel(models.Model):
                    objects = NewBaseManager['MyModel']()
                    objects2 = NewManager['MyModel']()

-   case: manager_without_generic_requires_annotation
    main: |
        from myapp.models import ModelQuerySet
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager, Manager
                from mypy_django_plugin.lib import generics

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'

                NewBaseManager = BaseManager.from_queryset(ModelQuerySet)
                NewManager = Manager.from_queryset(ModelQuerySet)

                generics.make_classes_generic(NewBaseManager, NewManager)

                class MyModel(models.Model):
                    objects = NewBaseManager()  # E: Need type annotation for 'objects'


-   case: from_queryset_with_custom_manager_as_base
    main: |
        from myapp.models import MyModel, NewManager
        reveal_type(NewManager())  # N: Revealed type is 'myapp.models.NewManager[<nothing>]'
        reveal_type(MyModel.objects)  # N: Revealed type is 'myapp.models.NewManager[myapp.models.MyModel]'
        reveal_type(MyModel.objects.get())  # N: Revealed type is 'Any'
        reveal_type(MyModel.objects.manager_only_method())  # N: Revealed type is 'builtins.int'
        reveal_type(MyModel.objects.manager_and_queryset_method())  # N: Revealed type is 'builtins.str'
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from mypy_django_plugin.lib import generics

                class ModelBaseManager(models.Manager):
                    def manager_only_method(self) -> int:
                        return 1
                class ModelQuerySet(models.QuerySet):
                    def manager_and_queryset_method(self) -> str:
                        return 'hello'

                NewManager = ModelBaseManager.from_queryset(ModelQuerySet)
                generics.make_classes_generic(NewManager)

                class MyModel(models.Model):
                    objects = NewManager['MyModel']()


-   case: from_queryset_with_class_name_provided
    main: |
        from myapp.models import MyModel, NewManager
        reveal_type(NewManager())  # N: Revealed type is 'myapp.models.NewManager[<nothing>]'
        reveal_type(MyModel.objects)  # N: Revealed type is 'myapp.models.NewManager[myapp.models.MyModel]'
        reveal_type(MyModel.objects.get())  # N: Revealed type is 'Any'
        reveal_type(MyModel.objects.manager_only_method())  # N: Revealed type is 'builtins.int'
        reveal_type(MyModel.objects.manager_and_queryset_method())  # N: Revealed type is 'builtins.str'
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from mypy_django_plugin.lib import generics

                class ModelBaseManager(models.Manager):
                    def manager_only_method(self) -> int:
                        return 1
                class ModelQuerySet(models.QuerySet):
                    def manager_and_queryset_method(self) -> str:
                        return 'hello'

                NewManager = ModelBaseManager.from_queryset(ModelQuerySet, class_name='NewManager')
                from mypy_django_plugin.lib import generics
                generics.make_classes_generic(NewManager)

                class MyModel(models.Model):
                    objects = NewManager['MyModel']()

-   case: from_queryset_with_class_inheritance
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is 'myapp.models.NewManager[myapp.models.MyModel*]'
        reveal_type(MyModel().objects.get())  # N: Revealed type is 'myapp.models.MyModel*'
        reveal_type(MyModel().objects.queryset_method())  # N: Revealed type is 'builtins.str'
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from django.db.models.manager import BaseManager
                class BaseQuerySet(models.QuerySet):
                    def queryset_method(self) -> str:
                        return 'hello'
                class ModelQuerySet(BaseQuerySet):
                    pass

                NewManager = BaseManager.from_queryset(ModelQuerySet)

                from mypy_django_plugin.lib import generics
                generics.make_classes_generic(NewManager)

                class MyModel(models.Model):
                    objects = NewManager['MyModel']()

-   case: from_queryset_with_manager_in_another_directory_and_imports
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is 'myapp.managers.NewManager[myapp.models.MyModel*]'
        reveal_type(MyModel().objects.get())  # N: Revealed type is 'myapp.models.MyModel*'
        reveal_type(MyModel().objects.queryset_method)  # N: Revealed type is 'def (param: Union[builtins.str, None] =) -> Union[builtins.str, None]'
        reveal_type(MyModel().objects.queryset_method('str'))  # N: Revealed type is 'Union[builtins.str, None]'
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from myapp.managers import NewManager

                from mypy_django_plugin.lib import generics
                generics.make_classes_generic(NewManager)

                class MyModel(models.Model):
                    objects = NewManager['MyModel']()
        -   path: myapp/managers.py
            content: |
                from typing import Optional
                from django.db import models

                class ModelQuerySet(models.QuerySet):
                    def queryset_method(self, param: Optional[str] = None) -> Optional[str]:
                        return param

                NewManager = models.Manager.from_queryset(ModelQuerySet)

-   case: from_queryset_with_inherited_manager_and_typing_no_return
    disable_cache: true
    main: |
        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is 'myapp.managers.NewManager[myapp.models.MyModel*]'
        reveal_type(MyModel().objects.get())  # N: Revealed type is 'myapp.models.MyModel*'
        reveal_type(MyModel().objects.base_queryset_method)  # N: Revealed type is 'def (param: Union[builtins.int, builtins.str]) -> <nothing>'
        reveal_type(MyModel().objects.base_queryset_method(2))  # N: Revealed type is '<nothing>'
    installed_apps:
        - myapp
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from myapp.managers import NewManager

                from mypy_django_plugin.lib import generics
                generics.make_classes_generic(NewManager)

                class MyModel(models.Model):
                    objects = NewManager['MyModel']()
        -   path: myapp/managers.py
            content: |
                from django.db import models
                from myapp.base_queryset import BaseQuerySet
                class ModelQuerySet(BaseQuerySet):
                    pass
                NewManager = models.Manager.from_queryset(ModelQuerySet)
        -   path: myapp/base_queryset.py
            content: |
                from typing import NoReturn, Union
                from django.db import models
                class BaseQuerySet(models.QuerySet):
                    def base_queryset_method(self, param: Union[int, str]) -> NoReturn:
                        raise ValueError


-   case: from_queryset_with_inherited_manager_and_fk_to_auth_contrib
    disable_cache: true
    main: |
        from myapp.base_queryset import BaseQuerySet
        reveal_type(BaseQuerySet().base_queryset_method)  # N: Revealed type is 'def (param: builtins.dict[builtins.str, Union[builtins.int, builtins.str]]) -> Union[builtins.int, builtins.str]'

        from django.contrib.auth.models import Permission
        reveal_type(Permission().another_models)  # N: Revealed type is 'django.db.models.manager.RelatedManager[myapp.models.AnotherModelInProjectWithContribAuthM2M]'

        from myapp.managers import NewManager
        reveal_type(NewManager())  # N: Revealed type is 'myapp.managers.NewManager[<nothing>]'
        reveal_type(NewManager().base_queryset_method)  # N: Revealed type is 'def (param: builtins.dict[builtins.str, Union[builtins.int, builtins.str]]) -> Union[builtins.int, builtins.str]'

        from myapp.models import MyModel
        reveal_type(MyModel().objects)  # N: Revealed type is 'myapp.models.MyModel_NewManager[myapp.models.MyModel]'
        reveal_type(MyModel().objects.get())  # N: Revealed type is 'myapp.models.MyModel*'
        reveal_type(MyModel().objects.base_queryset_method)  # N: Revealed type is 'def (param: builtins.dict[builtins.str, Union[builtins.int, builtins.str]]) -> Union[builtins.int, builtins.str]'
    installed_apps:
        - myapp
        - django.contrib.auth
    files:
        -   path: myapp/__init__.py
        -   path: myapp/models.py
            content: |
                from django.db import models
                from myapp.managers import NewManager
                from django.contrib.auth.models import Permission

                from mypy_django_plugin.lib import generics
                generics.make_classes_generic(NewManager)

                class MyModel(models.Model):
                    objects = NewManager['MyModel']()

                class AnotherModelInProjectWithContribAuthM2M(models.Model):
                    permissions = models.ForeignKey(
                        Permission,
                        on_delete=models.PROTECT,
                        related_name='another_models'
                    )
        -   path: myapp/managers.py
            content: |
                from django.db import models
                from myapp.base_queryset import BaseQuerySet
                class ModelQuerySet(BaseQuerySet):
                    pass
                NewManager = models.Manager.from_queryset(ModelQuerySet)
        -   path: myapp/base_queryset.py
            content: |
                from typing import Union, Dict
                from django.db import models
                class BaseQuerySet(models.QuerySet):
                    def base_queryset_method(self, param: Dict[str, Union[int, str]]) -> Union[int, str]:
                        return param["hello"]